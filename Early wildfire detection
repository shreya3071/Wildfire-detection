#include <DHT.h>
#include "U8glib.h"
#define METRIC
#define DHTPIN 14         // what digital pin we're connected to
#define DHTTYPE DHT11     // DHT 11

#include <Servo.h>
Servo myservo;
#include <LiquidCrystal.h>
#include <SoftwareSerial.h>                      //defining header file for software serial

SoftwareSerial mySerial(22, 24);
int pos = 0;
const int rs = 40, en = 38, d4 = 36, d5 = 34, d6 = 32, d7 = 30;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
char phone_no[] = "6303829113";
const int flamepin=11;
const int buzpin=26;
const int ledpin=3;
int flamesensvalue;
DHT dht(DHTPIN, DHTTYPE);

U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NO_ACK);  // Display which does not send AC
const uint8_t logo[] PROGMEM =
{
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x18, 0x0, 0x38, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0xc3,
  0x80, 0x0, 0x0, 0x0, 0x18, 0x0, 0x38, 0x6, 0x0, 0x40, 0x0, 0x0, 0x0, 0x0, 0x1,
  0xc3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0,
  0x1, 0xc3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x38, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0,
  0x0, 0x1, 0xc3, 0x8e, 0xc, 0x6e, 0x60, 0xf8, 0x7, 0xb8, 0x3e, 0x3, 0xfc, 0x38, 0x18,
  0x0, 0x0, 0x1, 0xc3, 0x8e, 0xc, 0x7e, 0xf0, 0xf8, 0xf, 0xf8, 0x3e, 0x3, 0xfc, 0x38,
  0x38, 0x0, 0x0, 0x1, 0xff, 0x8e, 0xc, 0x77, 0x30, 0x18, 0xe, 0x38, 0x6, 0x0, 0xc0,
  0x18, 0x30, 0x0, 0x0, 0x1, 0xff, 0x8e, 0xc, 0x67, 0x30, 0x18, 0x1c, 0x38, 0x6, 0x0,
  0xc0, 0x1c, 0x30, 0x0, 0x0, 0x1, 0xff, 0x8e, 0xc, 0x63, 0x30, 0x18, 0x1c, 0x38, 0x6,
  0x0, 0xc0, 0xc, 0x70, 0x0, 0x0, 0x1, 0xc3, 0x8e, 0xc, 0x63, 0x30, 0x18, 0x1c, 0x18,
  0x6, 0x0, 0xc0, 0xc, 0x60, 0x0, 0x0, 0x1, 0xc3, 0x8e, 0xc, 0x63, 0x30, 0x18, 0x1c,
  0x18, 0x6, 0x0, 0xc0, 0xe, 0x60, 0x0, 0x0, 0x1, 0xc3, 0x86, 0x1c, 0x63, 0x30, 0x18,
  0x1c, 0x18, 0x6, 0x0, 0xc0, 0x6, 0xc0, 0x0, 0x0, 0x1, 0xc3, 0x87, 0x1c, 0x63, 0x30,
  0x18, 0xe, 0x38, 0x6, 0x0, 0xe0, 0x7, 0xc0, 0x0, 0x0, 0x1, 0xc3, 0x87, 0xec, 0x63,
  0x31, 0xff, 0x8f, 0xd8, 0x7f, 0xe0, 0xfe, 0x3, 0xc0, 0x0, 0x0, 0x1, 0xc3, 0x83, 0xcc,
  0x63, 0x31, 0xff, 0x87, 0x98, 0x7f, 0xe0, 0x7e, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x3, 0x80, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x38, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x78, 0x0, 0x1, 0x80, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x78, 0x0, 0x1, 0x80, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3e, 0x78, 0x3e, 0x7, 0xf8,
  0xf, 0x81, 0xcf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x36, 0xd8, 0x7f, 0x7,
  0xf8, 0x1f, 0xc0, 0xdf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x36, 0xd8, 0xe1,
  0x81, 0x80, 0x38, 0x60, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x33, 0xd8,
  0xc1, 0xc1, 0x80, 0x30, 0x70, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x33,
  0x99, 0xff, 0xc1, 0x80, 0x7f, 0xf0, 0xe0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x33, 0x99, 0xff, 0xc1, 0x80, 0x7f, 0xf0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x31, 0x99, 0xc0, 0x1, 0x80, 0x70, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x30, 0x18, 0xc0, 0x1, 0x80, 0x30, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x30, 0x18, 0xe1, 0xc1, 0xc0, 0x38, 0x70, 0xc0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x30, 0x18, 0x7f, 0x81, 0xfc, 0x1f, 0xe0, 0xc0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x18, 0x3e, 0x0, 0xfc, 0xf, 0x80, 0xc0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0
};

bool first = true;
float hum = 0.0;
float temp = 0.0;
float hIndex = 0.0;
bool dht_test(float* humPerc, float* tempF, float* heatIndex);

void setup(void)
{
  lcd.begin(16, 2);
  
 myservo.attach(10);
  Serial.begin(9600);
  mySerial.begin(9600);
  pinMode(flamepin,INPUT);
  pinMode(buzpin,OUTPUT);
   pinMode(ledpin,OUTPUT);
  pinMode(12,OUTPUT);
  Serial.begin(9600);
  dht.begin();
  first = true;

  // assign default color value
  if (u8g.getMode() == U8G_MODE_R3G3B2)
  {
    u8g.setColorIndex(255);     // white
  }
  else if (u8g.getMode() == U8G_MODE_GRAY2BIT)
  {
    u8g.setColorIndex(3);         // max intensity
  }
  else if (u8g.getMode() == U8G_MODE_BW)
  {
    u8g.setColorIndex(1);         // pixel on
  }
  else if (u8g.getMode() == U8G_MODE_HICOLOR)
  {
    u8g.setHiColorByRGB(255, 255, 255);
  }

  // picture loop
  u8g.firstPage();

  do
  {
    u8g.drawBitmapP(0, 0, 16, 64, logo);
  }
  while (u8g.nextPage());

  dht_test(&hum, &temp, &hIndex);
}
void HumMeter(float* humPerc, float* temp, float* heatIndex)
{
  u8g.setFont(u8g_font_fub11);
  u8g.setFontRefHeightExtendedText();
  u8g.setDefaultForegroundColor();
  u8g.setFontPosTop();
  u8g.drawStr(4, 0, "Hum %");
  u8g.setPrintPos(80, 0);
  u8g.print(*humPerc);
#ifdef METRIC
  // if metric system, display Celsius
  u8g.drawStr(4, 20, "Temp C");
#else
  //display Farenheit
  u8g.drawStr(4, 20, "Temp F");
#endif

  u8g.setPrintPos(80, 20);
  u8g.print(*temp);
  u8g.drawStr(4, 40, "Heat Ind");
  u8g.setPrintPos(80, 40);
  u8g.print(*heatIndex);
}

void loop(void)
{
  bool result = dht_test(&hum, &temp, &hIndex);

  if (first)
  {
    // skip displaying readings first time, as its stale data.
    first = false;
  }
  else
  {
    if(result == false)
    {
      u8g.firstPage();
      do 
      {
        // sensor error
        u8g.setFont(u8g_font_fub11);
        u8g.setFontRefHeightExtendedText();
        u8g.setDefaultForegroundColor();
        u8g.setFontPosTop();
        u8g.drawStr(10, 30, "Sensor Error");
      }
      while (u8g.nextPage());
    }
    else
    {
      u8g.firstPage();
      do
      {
        HumMeter(&hum, &temp, &hIndex);
      }
      while (u8g.nextPage());
    }
  }
}
bool dht_test(float* humPerc, float* temp, float* heatIndex)
{
  // Wait a few seconds between measurements.
  delay(200);
  *humPerc = 0;
  *temp = 0;
  *heatIndex = 0;
  
  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float f = dht.readTemperature(true);

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t) || isnan(f))
  {
    Serial.println("Failed to read from DHT sensor!");
    return false;
  }

  // Compute heat index in Fahrenheit (the default)
  float hif = dht.computeHeatIndex(f, h);
  // Compute heat index in Celsius (isFahreheit = false)
  float hic = dht.computeHeatIndex(t, h, false);

  Serial.print("Humidity: ");
  Serial.print(h);
  Serial.print(" %\t");
  Serial.print("Temperature: ");
  Serial.print(t);
  Serial.print(" *C ");
  Serial.print(f);
  Serial.print(" *F\t");
  Serial.print("Heat index: ");
  Serial.print(hic);
  Serial.print(" *C ");
  Serial.print(hif);
  Serial.println(" *F");
  *humPerc = h;

  
    if(t>22)
    {
      for (pos = 0; pos <= 180; pos += 1) { // goes from 0 degrees to 180 degrees
      // in steps of 1 degree
      myservo.write(pos);              // tell servo to go to position in variable 'pos'
      delay(15);                       // waits 15ms for the servo to reach the position
        flamesensvalue=digitalRead(flamepin); // reads analog data from flame sensor
      Serial.print("flamesensvalue=");
      Serial.println(flamesensvalue); // put your main code here, to run repeatedly:
      if(flamesensvalue==1)
      {
            digitalWrite(buzpin,HIGH);
            digitalWrite(ledpin,HIGH);
            lcd.setCursor(0, 0);
            lcd.print("      ALERT      ");
            lcd.setCursor(0, 1);
            lcd.print("  FIRE REPORTED            ");
            delay(4000);
             lcd.setCursor(0, 0);
            lcd.print("LAT= 23.5466 N         ");
             lcd.setCursor(0, 1);
            lcd.print("LONG=87.2915 E           ");
            Serial.begin(9600);  //Open Serial Connection at baudrate 9600

            delay(2000);
            
            Serial.println("AT"); // Wake up GSM
            delay(200);
            
            mySerial.println("ATD+919851244946;");
            
            delay(30000);
            
            Serial.println("ATH"); // After a delay of 5 secs Hang the call
              delay(5000);
  
      }
else
{
  digitalWrite(buzpin,LOW);
  digitalWrite(ledpin,LOW);
    lcd.setCursor(0, 0);
      lcd.print("TEAM FLAMES!        ");
      lcd.setCursor(0, 1);
      lcd.print("SITUATION NORMAL!  ");
}
 
  }
  for (pos = 180; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(15);                       // waits 15ms for the servo to reach the position
      flamesensvalue=digitalRead(flamepin); // reads analog data from flame sensor
    Serial.print("flamesensvalue=");
    Serial.println(flamesensvalue); // put your main code here, to run repeatedly:
    if(flamesensvalue==1)
{
    digitalWrite(buzpin,HIGH);
            digitalWrite(ledpin,HIGH);
            lcd.setCursor(0, 0);
            lcd.print("      ALERT      ");
            lcd.setCursor(0, 1);
            lcd.print("  FIRE REPORTED            ");
            delay(4000);
             lcd.setCursor(0, 0);
            lcd.print("LAT= 23.5466 N         ");
             lcd.setCursor(0, 1);
            lcd.print("LONG=87.2915 E           ");
            Serial.begin(9600);  //Open Serial Connection at baudrate 9600

            delay(2000);
            
            Serial.println("AT"); // Wake up GSM
            delay(200);
            
            mySerial.println("ATD+919851244946;");
            
            delay(30000);
            
            Serial.println("ATH"); // After a delay of 5 secs Hang the call
              delay(5000);
  
  
}
else
{
  digitalWrite(buzpin,LOW);
    digitalWrite(ledpin,LOW);
        lcd.setCursor(0, 0);
      lcd.print("TEAM FLAMES!    ");
      lcd.setCursor(0, 1);
      lcd.print("SITUATION NORMAL!");
}
 
  }

  }

#ifdef METRIC
  // metric system, load degree celsius
  *temp = t;
  *heatIndex = hic;
#else
  *temp = f;
  *heatIndex = hif;
#endif
  return true;

}
